// Code generated by hertz generator.

package interaction

import (
	"bibi/biz/dal/db"
	"bibi/biz/model/interaction"
	"bibi/biz/service/interaction_service"
	"bibi/biz/service/video_service"
	"bibi/pkg/conf"
	"bibi/pkg/errno"
	"bibi/pkg/pack"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"golang.org/x/sync/errgroup"
)

// LikeAction .
// @Summary like_action
// @Description like or dislike video
// @Accept json/form
// @Produce json
// @Param video_id query int true "视频id"
// @Param action_type query int true "点赞:0;取消点赞:1"
// @Param Authorization header string true "token"
// @router /bibi/interaction/like/action [POST]
func LikeAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.LikeActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.LikeActionResp)

	v, _ := c.Get("current_user_id")
	id := v.(int64)

	switch req.ActionType {
	case 1:
		err = interaction_service.NewInteractionService(ctx).Like(&req, id)
	case 0:
		err = interaction_service.NewInteractionService(ctx).DisLike(&req, id)
	default:
		resp.Base = pack.BuildInteractionBaseResp(errno.ParamError)
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Base = pack.BuildInteractionBaseResp(err)
	c.JSON(consts.StatusOK, resp)
}

// LikeList .
// @Summary like_list
// @Description show the list of your liked videos
// @Accept json/form
// @Produce json
// @Param page_num query int64 true "页码"
// @Param Authorization header string true "token"
// @router /bibi/interaction/like/list [GET]
func LikeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.LikeListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.LikeListResp)

	v, _ := c.Get("current_user_id")
	id := v.(int64)

	//todo:未来用rpc改掉这里混沌的架构
	allLikeResp, err := interaction_service.NewInteractionService(ctx).LikeVideoList(&req, id)
	if err != nil {
		resp.Base = pack.BuildInteractionBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.VideoCount = int64(len(allLikeResp))

	var likeResp []int64
	if len(allLikeResp) <= int(req.PageNum-1)*conf.PageSize || int(req.PageNum-1)*conf.PageSize < 0 {
		resp.Base = pack.BuildInteractionBaseResp(nil)
		c.JSON(consts.StatusOK, resp)
		return
	} else {
		fst := int(req.PageNum-1) * conf.PageSize
		for i := fst; i < fst+conf.PageSize && i < len(allLikeResp); i++ {
			likeResp = append(likeResp, allLikeResp[i])
		}
	}

	var eg errgroup.Group

	var videoResp []db.Video
	eg.Go(func() error {
		videoResp, err = video_service.NewVideoService(ctx).GetLikeVideoList(likeResp)
		if err != nil {
			return err
		}
		return nil
	})

	var videoLikeList []int64
	eg.Go(func() error {
		for _, videoId := range likeResp {
			videoLikeCount, _ := interaction_service.NewInteractionService(ctx).GetVideoLikeById(videoId)
			videoLikeList = append(videoLikeList, videoLikeCount)
		}
		return nil
	})

	isLikeList := make([]int64, 0, len(likeResp))
	eg.Go(func() error {
		//因为是点赞列表，所以都是1
		for i := 0; i < len(likeResp); i++ {
			isLikeList = append(isLikeList, 1)
		}
		return nil
	})

	if err = eg.Wait(); err != nil {
		resp.Base = pack.BuildInteractionBaseResp(err)
		c.JSON(consts.StatusOK, resp)
	}

	resp.Base = pack.BuildInteractionBaseResp(err)
	resp.VideoList = video_service.BuildVideoListResp(videoResp, videoLikeList, isLikeList)
	c.JSON(consts.StatusOK, resp)
}

// CommentCreate .
// @Summary comment_create
// @Description comment video
// @Accept json/form
// @Produce json
// @Param video_id query int true "视频id"
// @Param parent_id query int false "父评论id"
// @Param content query string true "正文"
// @Param Authorization header string true "token"
// @router /bibi/interaction/comment/create [POST]
func CommentCreate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.CommentCreateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.CommentCreateResp)

	//if req.ParentID != nil && req.VideoID != nil {
	//	resp.Base = pack.BuildInteractionBaseResp(errno.ParamError)
	//	c.JSON(consts.StatusOK, resp)
	//	return
	//} //不能啥都有

	v, _ := c.Get("current_user_id")
	id := v.(int64)

	commentResp := new(db.Comment)

	commentResp, err = interaction_service.NewInteractionService(ctx).CommentCreate(&req, id)

	resp.Base = pack.BuildInteractionBaseResp(err)
	if err != nil {
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Comment = interaction_service.BuildCommentResp(commentResp)
	c.JSON(consts.StatusOK, resp)
}

// CommentDelete .
// @Summary comment_delete
// @Description delete your comment
// @Accept json/form
// @Produce json
// @Param video_id query int true "视频id"
// @Param comment_id query int true "评论id"
// @Param Authorization header string true "token"
// @router /bibi/interaction/comment/delete [POST]
func CommentDelete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.CommentDeleteReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.CommentDeleteResp)

	v, _ := c.Get("current_user_id")
	id := v.(int64)

	err = interaction_service.NewInteractionService(ctx).CommentDelete(&req, id)
	resp.Base = pack.BuildInteractionBaseResp(err)
	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @Summary comment_list
// @Description show video's comments
// @Accept json/form
// @Produce json
// @Param video_id query int true "视频id"
// @Param page_num query string true "页码"
// @router /bibi/interaction/comment/list [POST]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.CommentListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.CommentListResp)

	commentResp, count, err := interaction_service.NewInteractionService(ctx).CommentList(&req)
	resp.Base = pack.BuildInteractionBaseResp(err)
	if err != nil {
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.CommentCount = count
	resp.CommentList = interaction_service.BuildCommentsResp(commentResp)
	c.JSON(consts.StatusOK, resp)
}
