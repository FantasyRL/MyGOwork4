// Code generated by hertz generator.
//MVC--View

package user

import (
	user "bibi/biz/model/user"
	"bibi/biz/user/service"
	"bibi/pkg/errno"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @router /bibi/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.RegisterResp)

	userResp, err := service.NewUserService(ctx).Register(&req)
	resp.Base = errno.BuildBaseResp(err)
	if err != nil {
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.UserID = userResp.ID
	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /bibi/user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	resp := new(user.LoginResp)

	resp.Base = errno.BuildBaseResp(nil)

	v1, _ := c.Get("user") //从jwt.Init传过来的
	resp.User = service.BuildUserResp(v1)

	v2, _ := c.Get("token")
	resp.Token = v2.(string)

	c.JSON(consts.StatusOK, resp)
}

// Info .
// @router /bibi/user [GET]
func Info(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.InfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.InfoResp)

	UserResp, err := service.NewUserService(ctx).Info(&req)
	resp.Base = errno.BuildBaseResp(err)
	if err != nil {
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.User = service.BuildUserResp(UserResp)
	c.JSON(consts.StatusOK, resp)
}
