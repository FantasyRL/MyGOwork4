// Code generated by hertz generator.
//MVC--View

package user

import (
	user "bibi/biz/model/user"
	"bibi/biz/user/service"
	"bibi/pkg/conf"
	"bibi/pkg/errno"
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"io"
	"path/filepath"
)

// Register .
// @Summary Register
// @Description userRegister
// @Accept json/form
// @Produce json
// @Param username query string true "用户名"
// @Param password query string true "密码"
// @router /bibi/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.RegisterResp)

	userResp, err := service.NewUserService(ctx).Register(&req)
	resp.Base = errno.BuildBaseResp(err)
	if err != nil {
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.UserID = userResp.ID
	c.JSON(consts.StatusOK, resp)
}

// Login .
// @Summary Login
// @Description userLogin
// @Accept json/form
// @Produce json
// @Param username query string true "用户名"
// @Param password query string true "密码"
// @router /bibi/user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	resp := new(user.LoginResp)

	resp.Base = errno.BuildBaseResp(nil)
	//hertz jwt(mw)
	v1, _ := c.Get("user")
	resp.User = service.BuildUserResp(v1)
	//hertz jwt(mw)
	v2, _ := c.Get("token")
	resp.Token = v2.(string)

	c.JSON(consts.StatusOK, resp)
}

// Info .
// @Summary Information
// @Description show user's info
// @Accept json/form
// @Produce json
// @Param user_id query string true "用户id"
// @Param token query string true "token"
// @router /bibi/user [GET]
func Info(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.InfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.InfoResp)
	UserResp, err := service.NewUserService(ctx).Info(&req)
	//hertz jwt(mw)
	v, ok := c.Get("current_user_id")
	if !ok {
		err = errno.ParamError
	}
	if v != UserResp.ID {
		err = errno.AuthorizationError
	}
	resp.Base = errno.BuildBaseResp(err)
	if err != nil {
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.User = service.BuildUserResp(UserResp)
	c.JSON(consts.StatusOK, resp)
}

// Avatar .
// @Summary PUTAvatar
// @Description revise user's avatar
// @Accept json/form
// @Produce json
// @Body avatar_file form-data []byte true "头像"
// @Param token query string true "token"
// @router /bibi/user/avatar/upload [PUT]
func Avatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.AvatarReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	//绑定文件
	file, err := c.FormFile("avatar_file")
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.AvatarResp)

	//判断文件格式
	fileExt := filepath.Ext(file.Filename)
	allowExtMap := map[string]bool{
		".jpg":  true,
		".png":  true,
		".jpeg": true,
	}
	if _, ok := allowExtMap[fileExt]; !ok {
		resp.Base = errno.BuildBaseResp(errno.ParamError)
		c.JSON(consts.StatusOK, resp)
		return
	}

	//hertz jwt(mw)
	v, ok := c.Get("current_user_id")
	if !ok {
		resp.Base = errno.BuildBaseResp(errno.ParamError)
		c.JSON(consts.StatusOK, resp)
		return
	}
	id := v.(int64)

	fileContent, err := file.Open()
	if err != nil {
		resp.Base = errno.BuildBaseResp(errno.ParamError)
		c.JSON(consts.StatusOK, resp)
		return
	}
	req.AvatarFile, _ = io.ReadAll(fileContent)
	err = service.NewAvatarService(ctx).UploadAvatar(&req, id)

	avatarUrl := fmt.Sprintf("%s/%s/%d", conf.OSSConf.EndPoint, conf.OSSConf.MainDirectory, id)
	UserResp, err := service.NewAvatarService(ctx).PutAvatar(id, avatarUrl)

	resp.User = service.BuildUserResp(UserResp)
	c.JSON(consts.StatusOK, resp)
}
