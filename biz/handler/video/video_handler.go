// Code generated by hertz generator.

package video

import (
	"bibi/biz/dal/db"
	"bibi/biz/service/interaction_service"
	"bibi/biz/service/video_service"
	"bibi/pkg/conf"
	"bibi/pkg/errno"
	"bibi/pkg/pack"
	"context"
	"fmt"
	"golang.org/x/sync/errgroup"
	"path/filepath"

	video "bibi/biz/model/video"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// PutVideo .
// @Summary PutVideo
// @Description put video
// @Accept json/form
// @Produce json
// @Param video_file formData file true "视频文件"
// @Param title query string true "标题"
// @Param cover formData file true "视频封面"
// @Param Authorization header string true "token"
// @router /bibi/video/upload [POST]
func PutVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.PutVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	videoFile, err := c.FormFile("video_file")
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	cover, err := c.FormFile("cover")
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.PutVideoResp)
	//文件类型判断
	videoExt := filepath.Ext(videoFile.Filename)
	allowExtVideo := map[string]bool{
		".mp4": true,
	}
	if !pack.IsAllowExt(videoExt, allowExtVideo) {
		resp.Base = pack.BuildVideoBaseResp(errno.ParamError)
		c.JSON(consts.StatusOK, resp)
		return
	}
	coverExt := filepath.Ext(cover.Filename)
	allowExtCover := map[string]bool{
		".jpg":  true,
		".png":  true,
		".jpeg": true,
	}
	if !pack.IsAllowExt(coverExt, allowExtCover) {
		resp.Base = pack.BuildVideoBaseResp(errno.ParamError)
		c.JSON(consts.StatusOK, resp)
		return
	}
	//jwt(mw)
	v, _ := c.Get("current_user_id")
	id := v.(int64)
	//名字生成
	videoName, coverName := pack.GenerateName(id)
	//开启并发
	var eg errgroup.Group
	eg.Go(func() error {
		coverByte, err := pack.FileToByte(cover)
		if err != nil {
			return errno.ReadFileError
		}
		err = video_service.NewVideoService(ctx).UploadCover(coverByte, coverName)
		if err != nil {
			return errno.UploadFileError
		}
		return nil
	})
	eg.Go(func() error {
		videoByte, err := pack.FileToByte(videoFile)
		if err != nil {
			return errno.ReadFileError
		}
		err = video_service.NewVideoService(ctx).UploadVideo(videoByte, videoName)
		if err != nil {
			return errno.UploadFileError
		}
		return nil
	})
	VideoReq := new(db.Video)
	eg.Go(func() error {
		videoUrl := fmt.Sprintf("%s/%s/video/%s", conf.OSS.EndPoint, conf.OSS.MainDirectory, videoName)
		coverUrl := fmt.Sprintf("%s/%s/video/%s", conf.OSS.EndPoint, conf.OSS.MainDirectory, coverName)
		VideoReq = &db.Video{
			Uid:      id,
			Title:    req.Title,
			PlayUrl:  videoUrl,
			CoverUrl: coverUrl,
		}
		_, err = video_service.NewVideoService(ctx).PutVideo(VideoReq)
		if err != nil {
			return err
		}
		return nil
	})
	if err := eg.Wait(); err != nil {
		resp.Base = pack.BuildVideoBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Base = pack.BuildVideoBaseResp(nil)
	c.JSON(consts.StatusOK, resp)
}

// ListVideo .
// @Summary ListVideo
// @Description list user's videos
// @Accept json/form
// @Produce json
// @Param Authorization header string true "token"
// @Param page_num query int64 true "页码"
// @router /bibi/video/published [POST]
func ListVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.ListUserVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.ListUserVideoResp)

	//jwt(mw)
	v, _ := c.Get("current_user_id")
	id := v.(int64)
	videoResp, count, err := video_service.NewVideoService(ctx).ListVideo(&req, id)
	resp.Base = pack.BuildVideoBaseResp(err)
	if err != nil {
		c.JSON(consts.StatusOK, resp)
		return
	}

	var videoLikeList []int64
	for _, v := range videoResp {
		videoLikeCount, _ := interaction_service.NewInteractionService(ctx).GetVideoLikeById(v.ID)
		videoLikeList = append(videoLikeList, videoLikeCount)
	}
	isLikeList := make([]int64, 0, len(videoResp))
	for i := 0; i < len(videoResp); i++ {
		isLikeList = append(isLikeList, -1)
	}

	resp.VideoList = video_service.BuildVideoListResp(videoResp, videoLikeList, isLikeList)
	resp.Count = count
	c.JSON(consts.StatusOK, resp)
}

// SearchVideo .
// @Summary SearchVideo
// @Description search videos
// @Accept json/form
// @Produce json
// @Param page_num query int true "页码"
// @Param param query string true "搜索内容"
// @router /bibi/video/search [POST]
func SearchVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.SearchVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.SearchVideoResp)

	videoResp, count, err := video_service.NewVideoService(ctx).SearchVideo(&req)

	resp.Base = pack.BuildVideoBaseResp(err)
	if err != nil {
		c.JSON(consts.StatusOK, resp)
		return
	}

	var videoLikeList []int64
	for _, v := range videoResp {
		videoLikeCount, _ := interaction_service.NewInteractionService(ctx).GetVideoLikeById(v.ID)
		videoLikeList = append(videoLikeList, videoLikeCount)
	}
	isLikeList := make([]int64, 0, len(videoResp))
	for i := 0; i < len(videoResp); i++ {
		isLikeList = append(isLikeList, -1)
	}

	resp.VideoList = video_service.BuildVideoListResp(videoResp, videoLikeList, isLikeList)
	resp.Count = count

	c.JSON(consts.StatusOK, resp)
}

// HotVideo .
// @Summary HotVideo
// @Description hot video rank
// @Accept json/form
// @Produce json
// @router /bibi/video/hot [GET]
func HotVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video.HotVideoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(video.HotVideoResp)

	videoResp, err := video_service.NewVideoService(ctx).HotVideo(&req)
	resp.Base = pack.BuildVideoBaseResp(err)
	if err != nil {
		c.JSON(consts.StatusOK, resp)
		return
	}
	var videoLikeList []int64
	for _, v := range videoResp {
		videoLikeCount, _ := interaction_service.NewInteractionService(ctx).GetVideoLikeById(v.ID)
		videoLikeList = append(videoLikeList, videoLikeCount)
	}
	isLikeList := make([]int64, 0, len(videoResp))
	for i := 0; i < len(videoResp); i++ {
		isLikeList = append(isLikeList, -1)
	}

	resp.VideoList = video_service.BuildVideoListResp(videoResp, videoLikeList, isLikeList)
	c.JSON(consts.StatusOK, resp)
}
