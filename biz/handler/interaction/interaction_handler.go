// Code generated by hertz generator.

package interaction

import (
	"bibi/biz/dal/db"
	"bibi/biz/model/interaction"
	"bibi/biz/service/interaction_service"
	"bibi/biz/service/user_service"
	"bibi/biz/service/video_service"
	"bibi/pkg/pack"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// LikeAction .
// @Summary like_action
// @Description like or dislike video
// @Accept json/form
// @Produce json
// @Param video_id query int true "视频id"
// @Param action_type query int true "点赞:0;取消点赞:1"
// @Param Authorization header string true "token"
// @router /bibi/interaction/like/action [POST]
func LikeAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.LikeActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.LikeActionResp)

	v, _ := c.Get("current_user_id")
	id := v.(int64)

	switch req.ActionType {
	case 1:
		err = interaction_service.NewLikeService(ctx).Like(&req, id)
	case 0:
		err = interaction_service.NewLikeService(ctx).DisLike(&req, id)
	}
	resp.Base = pack.BuildInteractionBaseResp(err)
	c.JSON(consts.StatusOK, resp)
}

// LikeList .
// @Summary like_list
// @Description show the list of your liked videos
// @Accept json/form
// @Produce json
// @Param Authorization header string true "token"
// @router /bibi/interaction/like/list [GET]
func LikeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.LikeListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.LikeListResp)

	v, _ := c.Get("current_user_id")
	id := v.(int64)

	//todo:用rpc改掉这里混沌的架构
	likeResp, err := interaction_service.NewLikeService(ctx).LikeVideoList(&req, id)
	if err != nil {
		resp.Base = pack.BuildInteractionBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	videoResp, err := video_service.NewVideoService(ctx).GetLikeVideoList(likeResp)
	if err != nil {
		resp.Base = pack.BuildInteractionBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	var userResp []db.User
	var videoLikeList []int64
	for _, videoId := range likeResp {
		videoLikeCount, _ := interaction_service.NewLikeService(ctx).GetVideoLikeById(videoId)
		videoLikeList = append(videoLikeList, videoLikeCount)
	}
	for _, video := range videoResp {
		user, _ := user_service.NewUserService(ctx).GetUserByVideo(video)
		userResp = append(userResp, *user)
	}
	isLikeList := make([]int64, 0, len(likeResp))
	for i := 0; i < len(likeResp); i++ {
		isLikeList = append(isLikeList, 1)
	}

	resp.Base = pack.BuildInteractionBaseResp(err)
	resp.VideoList = video_service.BuildVideoListResp(videoResp, userResp, videoLikeList, isLikeList)
	c.JSON(consts.StatusOK, resp)
}
