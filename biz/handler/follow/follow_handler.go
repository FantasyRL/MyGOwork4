// Code generated by hertz generator.

package follow

import (
	"bibi/biz/service/follow_service"
	"bibi/biz/service/user_service"
	"bibi/pkg/errno"
	"bibi/pkg/pack"
	"context"

	follow "bibi/biz/model/follow"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FollowAction .
// @Summary follow_action
// @Description follow action
// @Accept json/form
// @Produce json
// @Param object_uid query int true "操作对象id"
// @Param action_type query int true "0：取消关注;1：关注"
// @Param Authorization header string true "token"
// @router /bibi/follow/action [POST]
func FollowAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow.FollowActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(follow.FollowActionResp)

	v, _ := c.Get("current_user_id")
	id := v.(int64)
	if req.ObjectUID == id {
		resp.Base = pack.BuildFollowBaseResp(errno.FollowMyselfError)
		c.JSON(consts.StatusOK, resp)
		return
	}
	switch req.ActionType {
	case 1:
		err = follow_service.NewFollowService(ctx).Follow(&req, id)

	case 0:
		err = follow_service.NewFollowService(ctx).UnFollow(&req, id)
	default:
		err = errno.ParamError
	}
	resp.Base = pack.BuildFollowBaseResp(err)
	c.JSON(consts.StatusOK, resp)
}

// FollowerList .
// @Summary follower_list
// @Description list your followers
// @Accept json/form
// @Produce json
// @Param Authorization header string true "token"
// @router /bibi/follow/follower [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow.FollowerListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(follow.FollowerListResp)

	v, _ := c.Get("current_user_id")
	id := v.(int64)

	followResp, count, err := follow_service.NewFollowService(ctx).FollowerList(&req, id)
	if err != nil {
		resp.Base = pack.BuildFollowBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	uidList := make([]int64, 0, len(followResp))
	for _, follower := range followResp {
		uidList = append(uidList, follower.Uid)
	}

	userResp, err := user_service.NewUserService(ctx).GetUserByIdList(uidList)
	if err != nil {
		resp.Base = pack.BuildFollowBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Count = count
	resp.FollowerList = follow_service.BuildFollowerUsersResp(id, userResp)
	c.JSON(consts.StatusOK, resp)
}

// FollowingList .
// @Summary following_list
// @Description list your followed
// @Accept json/form
// @Produce json
// @Param Authorization header string true "token"
// @router /bibi/follow/following [GET]
func FollowingList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow.FollowingListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(follow.FollowingListResp)

	v, _ := c.Get("current_user_id")
	id := v.(int64)

	followResp, count, err := follow_service.NewFollowService(ctx).FollowingList(&req, id)
	if err != nil {
		resp.Base = pack.BuildFollowBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	uidList := make([]int64, 0, len(followResp))
	for _, following := range followResp {
		uidList = append(uidList, following.FollowedId)
	}
	userResp, err := user_service.NewUserService(ctx).GetUserByIdList(uidList)
	if err != nil {
		resp.Base = pack.BuildFollowBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Count = count
	resp.FollowingList = follow_service.BuildFollowedUsersResp(userResp)
	c.JSON(consts.StatusOK, resp)
}

// FriendList .
// @Summary friend_list
// @Description list your friends
// @Accept json/form
// @Produce json
// @Param Authorization header string true "token"
// @router /bibi/follow/friend [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow.FriendListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(follow.FriendListResp)

	v, _ := c.Get("current_user_id")
	id := v.(int64)

	followResp, count, err := follow_service.NewFollowService(ctx).FriendList(&req, id)
	if err != nil {
		resp.Base = pack.BuildFollowBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	uidList := make([]int64, 0, len(followResp))
	for _, friend := range followResp {
		uidList = append(uidList, friend.Uid)
	}
	userResp, err := user_service.NewUserService(ctx).GetUserByIdList(uidList)
	if err != nil {
		resp.Base = pack.BuildFollowBaseResp(err)
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.Count = count
	resp.FriendList = follow_service.BuildFollowedUsersResp(userResp)
	c.JSON(consts.StatusOK, resp)
}
