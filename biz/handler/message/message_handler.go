// Code generated by hertz generator.

package message

import (
	message "bibi/biz/model/message"
	"bibi/biz/service/message_service"
	"bibi/pkg/pack"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// MessageChat .
// @router /bibi/message/chat/ [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req message.MessageChatReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(message.MessageChatResp)

	c.JSON(consts.StatusOK, resp)
}

// MessageAction .
// @Summary message_action
// @Description send message to user or group
// @Accept json/form
// @Produce json
// @Param target_id query int true "目标id"
// @Param content query string true "信息"
// @Param action_type query int true "暂时只有单聊所以填啥都行"
// @Param Authorization header string true "token"
// @router /bibi/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req message.MessageActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(message.MessageActionResp)

	v, _ := c.Get("current_user_id")
	id := v.(int64)

	err = message_service.NewMessageService(ctx).SendMessage(&req, id)

	resp.Base = pack.BuildMessageBaseResp(err)
	c.JSON(consts.StatusOK, resp)
}
